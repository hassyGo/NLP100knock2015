#!/usr/bin/env python
#coding: utf-8

"""
    46. 動詞の格フレーム情報の抽出
    45のプログラムを改変し，述語と格パターンに続けて項（述語に係っている文節そのもの）をタブ区切り形式で出力せよ．45の仕様に加えて，以下の仕様を満たすようにせよ．
    
    項は述語に係っている文節の単語列とする（末尾の助詞を取り除く必要はない）
    述語に係る文節が複数あるときは，助詞と同一の基準・順序でスペース区切りで並べる
    「吾輩はここで始めて人間というものを見た」という例文（neko.txt.cabochaの8文目）を考える． この文は「始める」と「見る」の２つの動詞を含み，「始める」に係る文節は「ここで」，「見る」に係る文節は「吾輩は」と「ものを」と解析された場合は，次のような出力になるはずである．
    
    始める  で      ここで
    見る    は を   吾輩は ものを
"""


from q40 import *
from q41 import *
from q42 import *



if __name__ == "__main__":

    sentences = makeSentenceListFromXml("neko.xml")
    
    dic = {}
    
    for s in sentences:
        for c in s:
            if c.isIncludePos("動詞"):
                verbIndex = c.getPosIndices("動詞")[0]
                verbBase = c.morphs[verbIndex].base
                for pindex in c.srcs:
                    if s[pindex].isIncludePos("助詞"):
                        parIndex = s[pindex].getPosIndices("助詞")[-1]
                        parBase = s[pindex].morphs[parIndex].base
                        parFull = s[pindex].getText()

                        if verbBase in dic:
                            if (parBase in dic[verbBase][0]) == False:
                                dic[verbBase][0].append(parBase)
                            if (parFull in dic[verbBase][1]) == False:
                                dic[verbBase][1].append(parFull)
                        else:
                            dic[verbBase] = [[parBase],[parFull]]
    print dic

    for k,v in dic.items():
        particles = sorted(v[0])
        particleChunks = sorted(v[1])
        print "%s\t%s\t%s" % (k," ".join(particles)," ".join(particleChunks))

